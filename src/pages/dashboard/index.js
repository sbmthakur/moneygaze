import { getTimePeriod } from "../../utils/getTimePeriod";
import { Header } from "../../components/common/Header";
import Head from "next/head";
import { Box, Card, Grid, useMediaQuery, useTheme } from "@mui/material";
import { MainChart } from "../../components/dasboard/MainChart";
import { Accounts } from "../../components/dasboard/Accounts";
import { Transactions } from "../../components/dasboard/Transactions";
import { useUserStore } from "@/src/store/userStore";
import { ExpenseChart } from "@/src/components/dasboard/ExpenseChart";
import { useCallback, useEffect, useState } from "react";
import { usePlaidLink } from "react-plaid-link";

const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;

const dashboard = () => {
  const timePeriod = getTimePeriod();
  const theme = useTheme();
  const smScreen = useMediaQuery(theme.breakpoints.down("md"));
  const user = useUserStore((state) => state.user);
  const chartHeight = smScreen ? 280 : 350;
  const [token, setToken] = useState(null);

  const [accounts, setAccounts] = useState(null);
  const [trasactions, setTransactions] = useState(null);

  const createLinkToken = async () => {
    const response = await fetch(baseUrl + "/api/create_link_token", {
      method: "POST",
    });
    const { link_token } = await response.json();
    setToken(link_token);
  };

  useEffect(() => {
    createLinkToken();
  }, []);

  useEffect(() => {
    if (user) {
      getAccounts();
    }
  }, [user]);

  const getAccounts = async () => {
    const response = await fetch(baseUrl + "/api/getaccountdetails", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        uniqueid: String(user.uniqueid),
        ssotoken: user.ssotoken,
      },
    });

    // check response code, if it is 204, do nothing, else set accounts and transactions
    if (response.status === 204) {
      return;
    }

    const data = await response.json();
    console.log("data", data);
    setAccounts(data.accounts);
    setTransactions(data.transactions);
  };

  const onSuccess = async (publicToken) => {
    console.log("user", user);

    const response = await fetch(baseUrl + "/api/exchange_public_token", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        uniqueid: String(user.uniqueid),
        ssotoken: user.ssotoken,
      },
      body: JSON.stringify({
        public_token: publicToken,
      }),
    });
    const data = await response.json();
    console.log("data", data);
    setAccounts(data.accounts);
    setTransactions(data.transactions);
  };

  const { open, ready } = usePlaidLink({
    token,
    onSuccess,
  });

  useEffect(() => {
    // token && alert("Token is ready");
    console.log("token", token);
    console.log("user", user);
  }, [token]);

  // <button onClick={() => open()} disabled={!ready}>
  //     <strong>Link account</strong>
  //   </button>

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {user ? (
        <Box m="20px">
          <Box m="10px 0">
            <Header
              title1={`${timePeriod}`}
              title2={`${user?.first_name}`}
              subtitle="Welcome to your dashboard"
            />
          </Box>
          <Grid
            container
            rowSpacing={2}
            columnSpacing={{ xs: 1, sm: 2, md: 3 }}
          >
            <Grid item xs={12} sm={12} md={7}>
              <Grid container rowSpacing={2}>
                <Grid item xs={12}>
                  <ExpenseChart chartHeight={chartHeight} />
                  {/* <MainChart /> */}
                </Grid>
                {smScreen && (
                  <Grid item xs={12}>
                    <Accounts
                      openLink={open}
                      disableButton={!ready}
                      accounts={accounts}
                    />
                  </Grid>
                )}
                <Grid item xs={12}>
                  <Transactions transactions={trasactions} />
                </Grid>
              </Grid>
            </Grid>
            {!smScreen && (
              <Grid item xs={12} sm={12} md={5}>
                <Accounts
                  openLink={open}
                  disableButton={!ready}
                  accounts={accounts}
                />
              </Grid>
            )}
          </Grid>
        </Box>
      ) : null}
    </>
  );
};

export default dashboard;
